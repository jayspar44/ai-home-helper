name: Deploy to Production

# Trigger on pushes to the main branch
on:
  push:
    branches:
      - main

# Required permissions for Workload Identity Federation
permissions:
  id-token: write      # Required to request OIDC token
  contents: read       # Required to checkout code

jobs:
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production  # Uses GitHub Environment with required reviewers

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Pre-deployment validation
        run: |
          echo "Pre-deployment checks..."
          echo "✓ Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "✓ Service: default (production)"
          echo "✓ Branch: ${{ github.ref_name }}"
          echo "✓ Commit: ${{ github.sha }}"
          echo "✓ Deploying to production after manual approval"

      - name: Deploy to App Engine Production via Cloud Build
        id: deploy
        run: |
          echo "Deploying to production environment using Cloud Build..."
          echo "This will become the default service and receive all traffic."
          echo "Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Service: default (production)"
          echo "Using optimized cloudbuild.yaml (caching + E2_HIGHCPU_8)"

          # Trigger Cloud Build with optimized configuration
          # This uses the same pipeline as manual 'npm run gcp:deploy:prod'
          # Benefits: tar+gzip caching, parallel operations, faster machine type
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --substitutions=_ENV=prod,_SERVICE_NAME=default

          echo "✓ Cloud Build deployment complete!"

      - name: Get deployment URL
        id: url
        run: |
          # Get the project ID from gcloud (already authenticated)
          PROJECT_ID=$(gcloud config get-value project)

          # Construct the production URL
          PROD_URL="https://${PROJECT_ID}.uc.r.appspot.com"
          echo "url=${PROD_URL}" >> $GITHUB_OUTPUT
          echo "Production URL: ${PROD_URL}"

      - name: Post deployment summary
        run: |
          echo "## Production Deployment Complete! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** default" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Approved by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Live and receiving traffic" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Allow a few minutes for the deployment to become active (cold start)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "App Engine health checks (readiness_check, liveness_check) will verify the deployment." >> $GITHUB_STEP_SUMMARY
