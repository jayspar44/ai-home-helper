# Cloud Build Configuration for Roscoe AI Home Helper
# Supports both dev and prod deployments with environment-specific configurations

# Available substitution variables (set via gcloud):
# _ENV: dev or prod (default: prod)
# _SERVICE_NAME: roscoe-dev or roscoe-prod (default: default)

substitutions:
  _ENV: 'prod'
  _SERVICE_NAME: 'default'

steps:
  # Step 0: Restore cached dependencies (tar+gzip for speed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'restore-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "============================================"
        echo "CLOUD BUILD ENVIRONMENT: ${_ENV}"
        echo "============================================"
        echo ""
        echo "üîÑ Restoring dependency cache..."

        # Download compressed cache archives in parallel (faster!)
        gcloud storage cp -m gs://$PROJECT_ID\_cloudbuild/cache/*.tar.gz . 2>/dev/null || echo "‚ö†Ô∏è  No cache found (first build)"

        # Extract archives (parallel for speed)
        (tar -xzf node_modules.tar.gz 2>/dev/null && echo "‚úÖ Root cache restored") || true &
        (tar -xzf backend-node_modules.tar.gz -C backend/ 2>/dev/null && echo "‚úÖ Backend cache restored") || true &
        (tar -xzf frontend-node_modules.tar.gz -C frontend/ 2>/dev/null && echo "‚úÖ Frontend cache restored") || true &

        # Wait for all parallel operations to complete
        wait

        echo "‚úÖ Cache restore complete"

  # Step 1: Install root dependencies
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['install']
    id: 'install-root'
    waitFor: ['restore-cache']

  # Step 2: Install backend dependencies
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['install']
    dir: 'backend'
    id: 'install-backend'
    waitFor: ['restore-cache']

  # Step 3: Install frontend dependencies
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['install']
    dir: 'frontend'
    id: 'install-frontend'
    waitFor: ['restore-cache']

  # Step 4: Build frontend with REACT_APP_FIREBASE_CONFIG secret
  # CRITICAL: This secret must be available during build time because
  # React apps bake environment variables into the bundle at build time
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Building frontend with Firebase config..."
        export REACT_APP_FIREBASE_CONFIG="$$REACT_APP_FIREBASE_CONFIG"
        cd frontend
        npm run build
        echo "Frontend build complete"
    id: 'build-frontend'
    waitFor: ['install-frontend']
    secretEnv:
      - 'REACT_APP_FIREBASE_CONFIG'

  # Step 5: Save dependency cache for next build (tar+gzip for speed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'save-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üíæ Saving dependency cache for next build..."

        # Compress all caches in parallel (fastest!)
        (tar -czf node_modules.tar.gz node_modules/ 2>/dev/null && echo "‚úÖ Root cache compressed") || echo "‚ö†Ô∏è  Root cache compression failed" &
        (tar -czf backend-node_modules.tar.gz backend/node_modules/ 2>/dev/null && echo "‚úÖ Backend cache compressed") || echo "‚ö†Ô∏è  Backend cache compression failed" &
        (tar -czf frontend-node_modules.tar.gz frontend/node_modules/ 2>/dev/null && echo "‚úÖ Frontend cache compressed") || echo "‚ö†Ô∏è  Frontend cache compression failed" &

        # Wait for compression to complete
        wait

        # Upload all caches in parallel with -m flag (multi-threaded, faster!)
        gcloud storage cp -m *.tar.gz gs://$PROJECT_ID\_cloudbuild/cache/ 2>/dev/null && echo "‚úÖ All caches uploaded" || echo "‚ö†Ô∏è  Cache upload failed"

        echo "üíæ Cache save operations complete"
    waitFor: ['install-root', 'install-frontend', 'install-backend']

  # Step 6: Deploy to App Engine
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENV}" = "dev" ]; then
          echo "Deploying to DEV environment..."
          gcloud app deploy app-dev.yaml --quiet
        else
          echo "Deploying to PROD environment..."
          gcloud app deploy app.yaml --quiet
        fi
    id: 'deploy'
    waitFor: ['build-frontend', 'install-backend', 'save-cache']

# Secret Manager Configuration
# These secrets are accessed from GCP Secret Manager
# Make sure all secrets exist and have proper IAM permissions
availableSecrets:
  secretManager:
    # Frontend secret (build-time) - injected during npm run build
    - versionName: 'projects/$PROJECT_ID/secrets/REACT_APP_FIREBASE_CONFIG/versions/latest'
      env: 'REACT_APP_FIREBASE_CONFIG'

    # Backend secrets (runtime) - injected via app.yaml at runtime
    # Note: These are NOT used in cloudbuild.yaml, they're accessed by App Engine
    # - FIREBASE_SERVICE_ACCOUNT
    # - GEMINI_API_KEY
    # - FRONTEND_URL

# Build options
# Note: Uses default machine type (E2_STANDARD_2) which is part of the free tier
options:
  # Enable build logging
  logging: 'CLOUD_LOGGING_ONLY'

  # Set substitution option
  substitutionOption: 'ALLOW_LOOSE'

# Build timeout (max 20 minutes)
timeout: '1200s'
